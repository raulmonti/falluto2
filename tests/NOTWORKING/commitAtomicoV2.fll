// Modelado de algoritmo de commit atomico de 2 fases, para estudio de
// tolerancia a fallas de tipo STOP.
// Para Falluto2.1
// Raul Monti
// 19/03/2014 12:50:59 


// Hace uso de las siguientes bondades de Falluto2.x:
// * Pasaje de instancias como parametro de proctypes.
// * Inyeccion declarativa de fallas tipo stop.
// * Sincronizacion entre procesos.
// * Meta-propiedad NormalBehaiviour para estudio bajo entorno sin fallas.



OPTIONS
MODELNAME commitAtomico
ENDOPTIONS


PROCTYPE RegularVoter(coo, v0, v1, v2)
    
    VAR
        phase: 0..2
        d: boolean
        up: boolean

    FAULT
        crash: => up' = False is STOP
    
    INIT
        phase = 0 & up = True

    TRANS
        [vote]: phase = 0 & coo.up & coo.phase = 1 => d' in {True, False}, phase' = 1
        [abort]: phase = 0 & !coo.up => phase' = 2, d' = False
        [commit]: phase < 2 & coo.phase = 2 => phase' = 2, d' = coo.d
        [commit]: phase < 2 & v0.phase = 2 => phase' = 2, d' = v0.d
        [commit]: phase < 2 & v1.phase = 2 => phase' = 2, d' = v1.d
        [commit]: phase < 2 & v2.phase = 2 => phase' = 2, d' = v2.d

ENDPROCTYPE


PROCTYPE Coordinator(v0, v1, v2, v3)

    VAR
        phase   : 0..2
        d       : boolean
        up      : boolean

    
    FAULT 
        crash: => up' = False is STOP

    INIT
        phase = 0 & up = True

    TRANS
        [vote]: phase = 0 => phase' = 1, d' in { True, False }
        [commit]:     phase = 1 & d
                & v0.up & v0.d & v0.phase = 1 
                & v1.up & v1.d & v1.phase = 1
                & v2.up & v2.d & v2.phase = 1
                & v3.up & v3.d & v3.phase = 1
                => phase' = 2, d' = True
        [abort]:     phase = 1 &
                ( (!v0.up | (v0.phase >= 1 & !v0.d)) 
                | (!v1.up | (v1.phase >= 1 & !v1.d)) 
                | (!v2.up | (v2.phase >= 1 & !v2.d)) 
                | (!v3.up | (v3.phase >= 1 & !v3.d))
                | !d)
                => phase' = 2, d' = False
ENDPROCTYPE



INSTANCE coord = Coordinator(voter0, voter1, voter2, voter3)
INSTANCE voter0 = RegularVoter(coord, voter1, voter2, voter3)
INSTANCE voter1 = RegularVoter(coord, voter0, voter2, voter3)
INSTANCE voter2 = RegularVoter(coord, voter0, voter1, voter3)
INSTANCE voter3 = RegularVoter(coord, voter0, voter2, voter1)




// LTLSPEC G (( coord.phase = 0 | coord.phase = 1 |  (coord.phase = 2 & !coord.d)) -> (((voter0.phase != 2 | !voter0.d) & (voter1.phase != 2 | !voter1.d) & (voter2.phase != 2 | !voter2.d) & (voter3.phase != 2 | !voter3.d ))))

//
// Si no ocurren errores y todos los procesos votan por \textbf{SI}, entonces todos los procesos llegan a la decision de commit.
//
PROPERTY = NORMAL_BEHAIVIOUR -> G ((coord.phase = 1 & coord.d & voter0.phase = 1 & voter0.d & voter1.phase = 1 & voter1.d & voter2.phase = 1 & voter2.d & voter3.phase = 1 & voter3.d) -> F (coord.phase = 2 & coord.d & voter0.phase = 2 & voter0.d & voter1.phase = 2 & voter1.d & voter2.phase = 2 & voter2.d & voter3.phase = 2 & voter3.d))

//
// Un proceso llega a la decision de commit solo si todos los procesos votaron \textbf{SI}.
//
PROPERTY = LTLSPEC G ( ((coord.phase = 2 & coord.d ) | (voter0.phase = 2 & voter0.d) | (voter1.phase = 2 & voter1.d) | (voter2.phase = 2 & voter2.d) | (voter3.phase = 2 & voter3.d)) -> (coord.phase != 0 & coord.d & voter0.phase != 0 & voter0.d & voter1.phase != 0 & voter1.d & voter2.phase != 0 & voter2.d & voter3.phase != 0 & voter3.d) )


//
// Todos los procesos que llegan a una decision, llegan a la misma. (caso de voter1 y voter3, y caso en que todos llegan a una desicion)
//
PROPERTY = LTLSPEC G ((voter1.phase = 2 & voter3.phase = 2) -> (voter1.d = voter3.d))
// LTLSPEC G ((coord.phase = 2 & voter0.phase = 2 & voter1.phase = 2 & voter2.phase = 2 & voter3.phase = 2) -> (coord.d = voter0.d & voter0.d = voter1.d & voter1.d = voter2.d & voter2.d = voter3.d))
