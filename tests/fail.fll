OPTIONS

FLLNAME test

CHECK_DEADLOCK

CHECK_DEADLOCK

ENDOPTIONS


PROCTYPE module1(ctxvar1; synact1)

	VAR
        var1: bool
        var2: {a,b,c}
        var3: -11..13

	FAULT
        fault1: ctxvar1 & 5+var3 > 7+var3 | FALSE & var1  => var1' = !( var1 in {a,b,FALSE}) is STOP(act1)
	    fault2: => var3' = 4  is BIZ(var3)
        fault3: is STOP
	
	INIT
		4 + 7 > var3
		//(1+3 > var3) -> (var1 = TRUE) & (var1 = FALSE | var2 in {1,2})

	TRANS
		[]: => var1' = !var1, var1' = (! var1' & var3 in {1,2, FALSE} )
		[act1]:
        [act2]:
		[synact1]: TRUE => var3' = 7

ENDPROCTYPE


INSTANCE instance1 = module1(instance2.var1, sincroniza1)
INSTANCE instance2 = module1(instance1.var1, sincroniza1)

//NORMAL_BEHAIVIOUR( G TRUE & just(instance2.act1))

//CTLSPEC A [! EG TRUE & ! just(instance2.fault2) | instance2.var2 = a U TRUE]

COMPASSION ( TRUE , TRUE != FALSE)

FAIRNESS just(instance1.act1) -> just(instance2.act1)

//FINITELY_MANY_FAULT(instance1.fault1; G F TRUE)
